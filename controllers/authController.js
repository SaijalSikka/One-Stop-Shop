import userModel from "../models/userModel.js";
import {comparePassword, hashPassword } from "../helpers/authHelpers.js";
import JWT from "jsonwebtoken";
import orderModel from "../models/orderModel.js";
//for register
export const registerController=async(req,res)=>{
    try{
        const { name,email,password,phone,address,answer }=req.body;
        //validation for checking if any of the entries missing 
        if(!name){
            return res.send({message:"Name is Required"})
        }
        if(!email){
            return res.send({message:"Email is Required"})
        }
        if(!password){
            return res.send({message:"Password is Required"})
        }
        if(!phone){
            return res.send({message:"Phone is Required"})
        }
        if(!address){
            return res.send({message:"Address is Required"})
        }
        if(!answer){
            return res.send({message:"Answer is Required"})
        }
        //check for existing user as from one email we dont want multiple users
        const existingUser=await userModel.findOne({email});
        if(existingUser){
            return res.status(200).send({
                success:false,
                message:"Already registered, please Login"
            });
        }
        //register user
        const hashedPassword=await hashPassword(password);
        const user=await new userModel({
            name,email,phone,address,
            answer,password:hashedPassword
        });
        user.save();
        res.status(201).send({
            success:true,
            message:"Registered Successfully",
            user
        });
    } catch(error){
        console.log(error);
        res.send({
            success:false,
            message:"Error in registration",
            error
        });
    }
};
//for login
export const loginController=async(req,res)=>{
    try{
        const {email,password}=req.body;
        //validation if any of the entries like email or password not entered
        if(!email || !password){
            return res.send({
                success:false,
                message:"Invalid username or password"
            })
        }
        // Checking if user with the given email exists in the database or not 
        const user=await userModel.findOne({email});
        if(!user){
            return res.send({
                success:false,
                message:"Email is not registered"
            })
        }
        const match=await comparePassword(password,user.password);
        if(!match){
            return res.status(200).send({
                success:false,
                message:"Invalid password"
            })
        }
        //token
        const token=await JWT.sign({_id:user._id},process.env.JWT_SECRET,{
            expiresIn:"30d"
        });
        res.status(200).send({
            success:true,
            message:"Logged in Successfully",
            user:{
                _id:user._id,
                name:user.name,
                email:user.email,
                phone:user.phone,
                address:user.address,
                role:user.role  //note that we are not sending over password as response 
            },token  // used for authentication. At the time of login, a JWT token is generated by the server and sent to the client. The client then stores this token in local storage or in a cookie.The token is then sent back to the server with each subsequent request. The server can then verify the token to ensure that the user is authenticated and authorized to access the requested resource
        });
    } catch(error){
        console.log(error);
        res.send({
            success:false,
            message:"Error in login",
            error
        })
    }
};

//forgot password controller
export const forgotPasswordController = async (req, res) => {
    try {
      const { email, answer, newPassword } = req.body;
      if (!email) {
        res.send({ message: "Email is required." });
      }
      if (!answer) {
        res.send({ message: "Answer to the security question is required." });
      }
      if (!newPassword) {
        res.send({ message: "Setting a new password is required." });
      }
  
      const user = await userModel.findOne({ email, answer });
      if (!user) {
        // Return a custom status code and error message for Not Found
        return res.send({
          success: false,
          errorCode: "USER_NOT_FOUND",
          message: "User not found. Please verify your email and answer.",
        });
      }
  
      const hashed = await hashPassword(newPassword);
      await userModel.findByIdAndUpdate(user._id, { password: hashed });
      res.status(200).send({
        success: true,
        message: "Password changed successfully.",
      });
    } catch (error) {
      console.log(error);
      res.send({
        success: false,
        message: "Something went wrong",
        error,
      });
    }
  };
  

//test controller 
export const testController=(req,res)=>{   //this is without the use of any middleware 
    res.send("protected route")
}

//controller for updating profile 
export const updateProfileController = async (req, res) => {
    try {
      const { name, email, password, address, phone } = req.body;
      const user = await userModel.findById(req.user._id);
      //password
      if (password && password.length < 6) {
        return res.json({ error: "Passsword is required and 6 character long" });
      }
      const hashedPassword = password ? await hashPassword(password) : undefined;
      const updatedUser = await userModel.findByIdAndUpdate(
        req.user._id,
        {
          name: name || user.name,
          password: hashedPassword || user.password,
          phone: phone || user.phone,
          address: address || user.address,
        },
        { new: true }
      );
      res.status(200).send({
        success: true,
        message: "Profile Updated Successfully",
        updatedUser,
      });
    } catch (error) {
      console.log(error);
      resa.send({
        success: false,
        message: "Error While Update profile",
        error,
      });
    }
  };

  //orders
export const getOrdersController = async (req, res) => {
    try {
      const orders = await orderModel
        .find({ buyer: req.user._id })
        .populate("products", "-photo")
        .populate("buyer", "name");
      res.json(orders);
    } catch (error) {
      console.log(error);
      res.send({
        success: false,
        message: "Error WHile Geting Orders",
        error,
      });
    }
  };

  //controller for getting all the orders 
  export const getAllOrdersController = async (req, res) => {
    try {
      const orders = await orderModel
        .find({})
        .populate("products", "-photo")
        .populate("buyer", "name")
        .sort({ createdAt: "-1" });
      res.json(orders);
    } catch (error) {
      console.log(error);
      res.send({
        success: false,
        message: "Error WHile Geting Orders",
        error,
      });
    }
  };

  //contoller for changing order status
export const orderStatusController = async (req, res) => {
    try {
      const { orderId } = req.params;
      const { status } = req.body;
      const orders = await orderModel.findByIdAndUpdate(
        orderId,
        { status },
        { new: true }
      );
      res.json(orders);
    } catch (error) {
      console.log(error);
      res.send({
        success: false,
        message: "Error While Updateing Order",
        error,
      });
    }
  };